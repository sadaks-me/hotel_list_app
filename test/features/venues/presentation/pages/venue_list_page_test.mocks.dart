// Mocks generated by Mockito 5.4.6 from annotations
// in hotel_list_app/test/features/venues/presentation/pages/venue_list_page_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:flutter_bloc/flutter_bloc.dart' as _i7;
import 'package:hotel_list_app/features/venues/domain/repositories/venue_repository.dart'
    as _i2;
import 'package:hotel_list_app/features/venues/presentation/bloc/venue_bloc.dart'
    as _i4;
import 'package:hotel_list_app/features/venues/presentation/bloc/venue_event.dart'
    as _i6;
import 'package:hotel_list_app/features/venues/presentation/bloc/venue_state.dart'
    as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeVenueRepository_0 extends _i1.SmartFake
    implements _i2.VenueRepository {
  _FakeVenueRepository_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeVenueState_1 extends _i1.SmartFake implements _i3.VenueState {
  _FakeVenueState_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [VenueBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockVenueBloc extends _i1.Mock implements _i4.VenueBloc {
  @override
  _i2.VenueRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeVenueRepository_0(
              this,
              Invocation.getter(#repository),
            ),
            returnValueForMissingStub: _FakeVenueRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.VenueRepository);

  @override
  _i3.VenueState get state =>
      (super.noSuchMethod(
            Invocation.getter(#state),
            returnValue: _FakeVenueState_1(this, Invocation.getter(#state)),
            returnValueForMissingStub: _FakeVenueState_1(
              this,
              Invocation.getter(#state),
            ),
          )
          as _i3.VenueState);

  @override
  _i5.Stream<_i3.VenueState> get stream =>
      (super.noSuchMethod(
            Invocation.getter(#stream),
            returnValue: _i5.Stream<_i3.VenueState>.empty(),
            returnValueForMissingStub: _i5.Stream<_i3.VenueState>.empty(),
          )
          as _i5.Stream<_i3.VenueState>);

  @override
  bool get isClosed =>
      (super.noSuchMethod(
            Invocation.getter(#isClosed),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  void add(_i6.VenueEvent? event) => super.noSuchMethod(
    Invocation.method(#add, [event]),
    returnValueForMissingStub: null,
  );

  @override
  void onEvent(_i6.VenueEvent? event) => super.noSuchMethod(
    Invocation.method(#onEvent, [event]),
    returnValueForMissingStub: null,
  );

  @override
  void emit(_i3.VenueState? state) => super.noSuchMethod(
    Invocation.method(#emit, [state]),
    returnValueForMissingStub: null,
  );

  @override
  void on<E extends _i6.VenueEvent>(
    _i7.EventHandler<E, _i3.VenueState>? handler, {
    _i7.EventTransformer<E>? transformer,
  }) => super.noSuchMethod(
    Invocation.method(#on, [handler], {#transformer: transformer}),
    returnValueForMissingStub: null,
  );

  @override
  void onTransition(
    _i7.Transition<_i6.VenueEvent, _i3.VenueState>? transition,
  ) => super.noSuchMethod(
    Invocation.method(#onTransition, [transition]),
    returnValueForMissingStub: null,
  );

  @override
  _i5.Future<void> close() =>
      (super.noSuchMethod(
            Invocation.method(#close, []),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  void onChange(_i7.Change<_i3.VenueState>? change) => super.noSuchMethod(
    Invocation.method(#onChange, [change]),
    returnValueForMissingStub: null,
  );

  @override
  void addError(Object? error, [StackTrace? stackTrace]) => super.noSuchMethod(
    Invocation.method(#addError, [error, stackTrace]),
    returnValueForMissingStub: null,
  );

  @override
  void onError(Object? error, StackTrace? stackTrace) => super.noSuchMethod(
    Invocation.method(#onError, [error, stackTrace]),
    returnValueForMissingStub: null,
  );
}
